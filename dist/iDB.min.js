"use strict";function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),iDB=function(){function a(){_classCallCheck(this,a),this.throwError("iDB cannot be instantiated. Use iDB.help() to log out more info.")}return _createClass(a,null,[{key:"exists",value:function(a){return a||this.throwError("Database name must be specified"),new Promise(function(b){var c=indexedDB.open(a);c.onupgradeneeded=function(a){a.target.transaction&&a.target.transaction.abort(),b(!1)},c.onsuccess=function(a){a.target.transaction&&a.target.transaction.abort(),b(!0)}})}},{key:"use",value:function(a){return this.databaseName=a,this}},{key:"setDatabase",value:function(){var a=this;return arguments.length||this.throwError("Database name must be specified"),this.reset(!0),this.databaseName=arguments.length<=0?void 0:arguments[0],2==arguments.length?this.databaseVersion=arguments.length<=1?void 0:arguments[1]:arguments.length>2&&this.throwError("Invalid number of parameters. Documentation: https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open"),new Promise(function(b){a.openTransaction().then(function(){a.reset(!0),b()})})}},{key:"dropDatabase",value:function(a){var b=this;return a||this.throwError("No database name provided"),new Promise(function(c,d){var e=indexedDB.deleteDatabase(a);e.onsuccess=function(){return c()},e.onerror=function(){return d()},b.reset(!0)})}},{key:"createTable",value:function(a,b){return a||this.throwError("Table name not specified"),this.newTableColumns=this.newTableColumns||[],this.newTablesList=this.newTablesList||[],this.newTableData&&this.newTablesList.push({tableData:this.newTableData,tableColumns:this.newTableColumns}),this.newTableData={tableName:a},this.newTableColumns=[],b&&(this.newTableData.options=b),this.reset(!0),this}},{key:"addColumn",value:function(a,b){this.newTableData||this.throwError("You must provide a table to add the column to."),null==a&&this.throwError("You must provide a column name"),a.includes(" ")&&this.throwError("Column names cannot contain spaces");var c={name:a};return b&&(b.hasOwnProperty("keyPath")&&(c.keyPath=b.keyPath,delete b.keyPath),Object.keys(b).length&&(c.options=b)),c.keyPath=c.keyPath?c.keyPath:a,this.newTableColumns.push(c),this}},{key:"addColumns",value:function(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];return this.compileListFromArguments(b,"string").forEach(this.addColumn.bind(this)),this}},{key:"select",value:function(){this.validateOperation("select");for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=this.compileListFromArguments(b,"string");return d&&d.length&&(this.selectList=d),this.operation="select",this}},{key:"functions",value:function(){for(var a=this,b=[],c=function(c){"object"==("undefined"==typeof c?"undefined":_typeof(c))&&c==Object(c)?(c.hasOwnProperty("column")||a.throwError("No column name provided in object. It must be provided to the key 'column'"),c.hasOwnProperty("scalar")&&("function"==typeof c.scalar?c.scalar=[c.scalar]:Array.isArray(c.scalar)&&!c.scalar.some(function(a){return"function"!=typeof a})||a.throwError("Scalar value must be either a function or array of functions")),c.hasOwnProperty("aggregate")&&"function"!=typeof c.aggregate&&a.throwError("Aggregate value must be a function")):a.throwError("Functions must be provided in objects, along with their columns. Check the documentation for more info."),b.push(c)},d=arguments.length,e=Array(d),f=0;f<d;f++)e[f]=arguments[f];return e.forEach(function(a){Array.isArray(a)?a.forEach(function(a){return c(a)}):c(a)}),b.length&&(this.functionsList=b),this}},{key:"insert",value:function(a){return this.validateOperation("add"),this.insertData=a,this.operation="add",this}},{key:"into",value:function(a){return a||this.throwError("Table name must be provided"),this.table=a,this}},{key:"values",value:function(a){return a||this.throwError("No data provided"),this.insertData=a,this}},{key:"limit",value:function(a){return a=parseInt(a),!a||!Number.isInteger(a)||a<=0?console.warn("Limit value must be a positive integer, of value 1 or higher"):this.limitValue=a,this}},{key:"skip",value:function(a){return a=parseInt(a),!a||!Number.isInteger(a)||a<=0?console.warn("Skip value must be a positive integer, of value 1 or higher"):this.skipValue=a,this}},{key:"reverse",value:function(){return this.direction="prev",this}},{key:"distinct",value:function(){return this.isDistinct=!0,this}},{key:"delete",value:function(){return this.validateOperation("delete"),this.operation="delete",this}},{key:"from",value:function(a){return a||this.throwError("Table name must be provided"),this.table=a,this}},{key:"update",value:function(a){return this.validateOperation("update"),a||this.throwError("Table name must be provided"),this.table=a,this.operation="update",this}},{key:"set",value:function(a){return a&&(Array.isArray(a)||a!=Object(a)||"object"!=("undefined"==typeof a?"undefined":_typeof(a))?this.throwError("Update value must be an object of keys, for relating to database structure."):this.updateValues=a),this}},{key:"where",value:function(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=this.compileListFromArguments(b,"function");return d&&d.length&&(this.conditionsList=d),this}},{key:"orderBy",value:function(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=this.compileListFromArguments(b,"string");return d&&d.length&&(this.orderByList=d),this}},{key:"groupBy",value:function(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=this.compileListFromArguments(b,"string");return d&&d.length&&(this.groupByList=d),this}},{key:"run",value:function(){var a=this;return new Promise(function(b,c){if(a.databaseName||a.throwError("Database name not provided"),a.table||a.throwError("Table name not provided"),"select"!=a.operation&&a.orderByList&&(a.orderByList=null,console.warn("Cannot use orderBy with: "+a.operation)),"add"==a.operation){if(!a.insertData)return;a.openTransaction().then(function(){var c=a.transaction.objectStore(a.table);c.add(a.insertData),c.onerror=function(a){return console.warn("Insertion error: "+a)},a.db.close(),a.reset(),b()})}else{var d=function(){var d=0;return"update"!=a.operation||a.updateValues?("delete"!=a.operation&&"update"!=a.operation||(a.isDistinct=!1),void a.openTransaction().then(function(){var e=[],f=a.transaction.objectStore(a.table),g=""+(a.direction||"next")+(a.isDistinct?"distinct":""),h=f.openCursor(null,g),i=function(b,c){a.conditionsList&&a.conditionsList.some(function(a){return!a(b.value)})||!function(){switch(a.operation){case"select":var f=c?c:b.value;a.functionsList&&a.functionsList.forEach(function(a){f[a.column]=a.scalar?a.scalar.reduce(function(a,b){return b(a)},f[a.column]):f[a.column]}),e.push(f);break;case"delete":d++,b.delete();break;case"update":var g=b.value;for(var h in a.updateValues)g[h]=a.updateValues[h];d++,b.update(g)}}()},j=function(f){var g=void 0;a.groupByList&&a.groupByList.length&&(a.selectList&&a.selectList.length&&(a.groupByList=a.groupByList.filter(function(b){var c=a.selectList.includes(b);return c||console.warn(b+" not in columns selected ("+a.selectList.join(", ")+")"),c})),a.groupByList.length&&!function(){var b={};g={},a.functionsList&&a.functionsList.forEach(function(a){a.aggregate&&(b[a.column]=a.aggregate)}),e.forEach(function(c){var d=function a(c,d,e){var f=c[0],g=d[f];_defineProperty({},g,[]);delete d[f],c.shift();var h=function(){c.length?a(c,d,e[g]):e[g].push(d)};if(b.hasOwnProperty(f)&&Object.keys(e).length){var i=Object.keys(e)[0];g=b[f](i,g),e[g]=e[i],delete e[i],h()}else e.hasOwnProperty(g)?h():c.length?(e[g]={},a(c,d,e[g])):e[g]=[d]};d(a.groupByList.slice(0),c,g)})}()),a.orderByList&&a.orderByList.length&&!g&&(a.selectList&&a.orderByList.length&&(a.orderByList=a.orderByList.filter(function(b){var c=a.selectList.includes(b);return c||console.warn(b+" not in columns selected ("+a.selectList.join(", ")+")"),c})),e.sort(function(b,c){var d=!0,e=!1,f=void 0;try{for(var g,h=a.orderByList[Symbol.iterator]();!(d=(g=h.next()).done);d=!0){var i=g.value;if(b[i]!=c[i])return b[i]<c[i]?-1:1}}catch(a){e=!0,f=a}finally{try{!d&&h.return&&h.return()}finally{if(e)throw f}}})),a.db.close(),a.reset(),f?c():b(g?g:Object.keys(e).length?e:d)};h.onsuccess=function(b){var c=b.target.result;if(a.skipValue){var d=a.skipValue;a.skipValue=null,c.advance(d)}else c?(a.selectList?!function(){var b={};a.selectList.forEach(function(a){return b[a]=c.value[a]}),i(c,b)}():i(c),!a.limitValue||e.length<a.limitValue?c.continue():j()):j()},h.onerror=function(b){j(!0),a.throwError("Error selecting data: "+h.error)}})):(a.reset(),{v:b(d)})}();if("object"===("undefined"==typeof d?"undefined":_typeof(d)))return d.v}})}},{key:"openTransaction",value:function(){var a=this;return new Promise(function(b,c){a.databaseName||a.throwError("Cannot start transaction. Database name not provided.");var d=indexedDB.open(a.databaseName,a.databaseVersion);d.onupgradeneeded=function(){var b=d.transaction;a.db=d.result,a.newTablesList=a.newTablesList||[],a.newTableData&&a.newTablesList.push({tableData:a.newTableData,tableColumns:a.newTableColumns||[]});var c=function(b){var c=b.tableData,d=b.tableColumns,e=a.db.createObjectStore(c.tableName,c.options);d.forEach(function(a){var b=a.name,c=a.keyPath,d=a.options;e.createIndex(b,c,d)})};event.oldVersion?!function(){var d=Object.keys(a.db.objectStoreNames).map(function(b){return a.db.objectStoreNames[b]}),e=a.newTablesList.map(function(a){return a.tableData.tableName}),f=d.filter(function(a){return!e.includes(a)});f.forEach(function(b){a.db.deleteObjectStore(b),d.splice(d.indexOf(b),1)});var g=a.newTablesList.filter(function(a){return!d.includes(a.tableData.tableName)});g.forEach(c),d.forEach(function(c){var d=b.objectStore(c,"readwrite"),e=Object.keys(d.indexNames).map(function(a){return d.indexNames[a]}),f=[];a.newTablesList.some(function(a){if(a.tableData.tableName==c)return f=a.tableColumns,!0});var g=f.map(function(a){return a.name}),h=e.filter(function(a){return!g.includes(a)});h.forEach(function(a){return d.deleteIndex(a)});var i=f.filter(function(a){return!e.includes(a.name)});i.forEach(function(a){var b=a.name,c=a.keyPath,e=a.options;return d.createIndex(b,c,e)})})}():a.newTablesList.forEach(c),a.newTablesList=[],a.newTableData=null,a.newTablesColumns=[]},d.onerror=function(){a.reset(),a.throwError("Error opening database "+d.error)},d.onsuccess=function(){a.table?(a.db=d.result,a.transaction=d.result.transaction(a.table,"readwrite"),a.transaction.oncomplete=function(){a.transaction=null,a.db.close()}):d.result.close(),b()}})}},{key:"reset",value:function(a){a&&(this.databaseName=null),this.operation=null,this.table=null,this.limitValue=null,this.selectList=null,this.functionsList=null,this.insertData=null,this.skipValue=null,this.direction="next",this.isDistinct=!1,this.conditionsList=null,this.updateValues=null,this.orderByList=null,this.groupByList=null,this.objectStoreProperties=null}},{key:"validateOperation",value:function(a){this.operation&&this.operation!=a?this.throwError("Multiple operations are not supported. (Existing operation: "+this.operation+")"):this.operation==a&&console.warn("Duplicate operation: "+a)}},{key:"throwError",value:function(a){throw this.reset(),new Error(a)}},{key:"compileListFromArguments",value:function(a,b){var c=this,d=[];return a.forEach(function(a){("undefined"==typeof a?"undefined":_typeof(a))===b?d.push(a):Array.isArray(a)?a.some(function(a){return("undefined"==typeof a?"undefined":_typeof(a))!==b})?c.throwError("Arguments must all be "+b+"s"):d=d.concat(a):c.throwError("Arguments must all be "+b+"s")}),d}},{key:"help",value:function(){console.info("Database Management"),console.table({createTable:{explanation:"Start configuring a new table. The name must be provided, and optionally, the configuration details.",parameters:"[0-String] Table name [1-Object] Configuration options (Optional)",returns:"iDB"},addColumn:{explanation:"Add a column to a new table. You need to provide the name, then optionally, the configuration data.",parameters:"[0-String] Column name [1-Object] Options (Optional)",returns:"iDB"},addColumns:{explanation:"A helper function to make it easier to input a larger list of columns, when names are the only parameter",parameters:"Any number of string parameters, string arrays and any combination of the two",returns:"iDB"},setDatabase:{explanation:"Create a database, or increase existing database version.",parameters:"[0-String] Database name [1-Integer] Version (Optional)",returns:"Promise"},dropDatabase:{explanation:"Drop an existing database",parameters:"[0-String] Database name",returns:"Promise"},use:{explanation:"Select the database to use. This does not get reset after queries, so setting it once should be enough.",parameters:"[0-String] Database name",returns:"iDB"},exists:{explanation:"Check if a database exists",parameters:"[0-String] Database name",returns:"Promise (with Boolean)"}}),console.info("Reading and writing data"),console.table({run:{explanation:"This function needs to be called at the end of the query building chain. It also clears that data once run (but not the database beign used)",parameters:"none",returns:"Promise"},select:{explanation:"Data to select",parameters:"Any number of string parameters, string arrays and any combination of the two (Optional) - Leaving it empty will select all keys",returns:"iDB"},functions:{explanation:"Scalar or aggregate functions to apply to values. Scalar functions are applied to each value individually, and aggregate functions are applied to all values grouped together",parameters:"Any number of object parameters, arrays of object parameters or any combination of the two.",returns:"iDB"},from:{explanation:"Specify the table to use for queries",parameters:"[0-String] Table name",returns:"iDB"},where:{explanation:"Specify a list of conditions for the query. The conditions are functions that take a parameter and return a boolean value",parameters:"Any number of function parameters, arrays of function parameters and any combination of the two",returns:"iDB"},insert:{explanation:"Insert data into a table in a database",parameters:"[0-Object] Data assigned the the keys matching the table structure",returns:"iDB"},into:{explanation:"Specify table to insert data into",parameters:"[0-String] Table name",returns:"iDB"},values:{explanation:"Optional function for people who prefer the more SQL-like look. Goes together with insert, when select is given no parameters",parameters:"[0-Object] Data assigned the the keys matching the table structure",returns:"iDB"},limit:{explanation:"Limit the number of results for the cursor to query",parameters:"[0-Integer] The positive integer value of the maximum data size",returns:"iDB"},skip:{explanation:"Skip results from the start of the query",parameters:"[0-Integer] Positive integer value of the number or results to skip",returns:"iDB"},reverse:{explanation:"Use to query the table starting from the bottom",parameters:"none",returns:"iDB"},distinct:{explanation:"Use to query only results that are not duplicates",parameters:"none",returns:"iDB"},delete:{explanation:"Use this to delete data from a table",parameters:"none",returns:"iDB"},update:{explanation:"Use this to update data in a table",parameters:"[0-String] Table name",returns:"iDB"},set:{explanation:"Use together with update() to update records with this value",parameters:"[0-Object] A key value object of what values each column should update to",returns:"iDB"},orderBy:{explanation:"Determine the order of records with list of column names",parameters:"Any number of string parameters, arrays of string parameters and any combination of the two",returns:"iDB"},groupBy:{explanation:"Group the results together by some columns",parameters:"Any number of string parameters, arrays of string parameters and any combination of the two",returns:"iDB"}})}}]),a}();